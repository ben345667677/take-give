name: Deploy to AWS (SSH)

# This workflow deploys to AWS EC2 using SSH
# Triggers ONLY after tests pass on main branch
# IMPORTANT: Deployment runs ONLY if tests succeed!

on:
  workflow_run:
    workflows: ["Run Tests"]
    types:
      - completed
    branches:
      - main

jobs:
  deploy:
    name: Build and Deploy to AWS via SSH
    runs-on: ubuntu-latest
    # Only deploy if tests passed successfully
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/trade-give-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/trade-give-frontend:${{ github.sha }}
          cache-to: type=inline

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/trade-give-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/trade-give-backend:${{ github.sha }}
          cache-to: type=inline

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/deploy_key.pem
          chmod 600 ~/.ssh/deploy_key.pem
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2 via SSH
        run: |
          ssh -i ~/.ssh/deploy_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'ENDSSH'
            set -e

            echo "üöÄ Starting deployment on EC2..."

            # Check prerequisites
            echo "üîç Checking prerequisites..."
            if ! command -v docker &> /dev/null; then
              echo "‚ùå ERROR: Docker is not installed on this EC2 instance!"
              echo "üìã Please install Docker first:"
              echo "   sudo yum update -y"
              echo "   sudo yum install -y docker"
              echo "   sudo systemctl start docker"
              echo "   sudo systemctl enable docker"
              echo "   sudo usermod -aG docker \$USER"
              echo ""
              echo "   Then log out and log back in for group changes to take effect"
              exit 1
            fi

            if ! command -v docker-compose &> /dev/null; then
              echo "‚ùå ERROR: docker-compose is not installed on this EC2 instance!"
              echo "üìã Please install docker-compose first:"
              echo "   sudo curl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose"
              echo "   sudo chmod +x /usr/local/bin/docker-compose"
              exit 1
            fi

            echo "‚úÖ Docker and docker-compose are installed"

            # Create and navigate to app directory with proper permissions
            echo "üìÅ Setting up deployment directory..."
            sudo mkdir -p /opt/trade-give
            sudo chown $USER:$USER /opt/trade-give
            cd /opt/trade-give

            # Create docker-compose.yml if it doesn't exist
            if [ ! -f docker-compose.yml ]; then
              echo "üìù Creating initial docker-compose.yml..."
              cat > docker-compose.yml << 'COMPOSE_EOF'
          version: '3.8'

          services:
            loginpage:
              image: nginx:alpine
              ports:
                - "80:80"
              depends_on:
                - backend
              restart: unless-stopped

            backend:
              image: node:18-alpine
              ports:
                - "3000:3000"
              environment:
                DB_HOST: db
                DB_PORT: 3306
                DB_USER: ${DB_USER:-produser}
                DB_PASSWORD: ${DB_PASSWORD}
                DB_NAME: ${DB_NAME:-loginapp}
                JWT_SECRET: ${JWT_SECRET}
                PORT: 3000
              depends_on:
                db:
                  condition: service_healthy
              restart: unless-stopped

            db:
              image: mysql:8.0
              environment:
                MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
                MYSQL_DATABASE: ${MYSQL_DATABASE:-loginapp}
                MYSQL_USER: ${MYSQL_USER:-produser}
                MYSQL_PASSWORD: ${MYSQL_PASSWORD}
              ports:
                - "3306:3306"
              volumes:
                - db_data:/var/lib/mysql
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
                interval: 10s
                timeout: 5s
                retries: 5

          volumes:
            db_data:
          COMPOSE_EOF
            fi

            # Create .env file if it doesn't exist
            if [ ! -f .env ]; then
              echo "‚ö†Ô∏è  WARNING: No .env file found!"
              echo "üìù Creating default .env - CHANGE THESE VALUES!"
              cat > .env << 'ENV_EOF'
          # Database
          DB_USER=produser
          DB_PASSWORD=CHANGE_ME_SECURE_PASSWORD_123
          DB_NAME=loginapp

          # MySQL
          MYSQL_ROOT_PASSWORD=CHANGE_ME_ROOT_PASSWORD_456
          MYSQL_DATABASE=loginapp
          MYSQL_USER=produser
          MYSQL_PASSWORD=CHANGE_ME_SECURE_PASSWORD_123

          # Backend
          JWT_SECRET=CHANGE_ME_SUPER_SECRET_JWT_KEY_789
          ENV_EOF
              echo "‚ö†Ô∏è  IMPORTANT: Edit /opt/trade-give/.env and set secure passwords!"
            fi

            # Pull latest images
            echo "üì• Pulling Docker images..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/trade-give-frontend:${{ github.sha }}
            docker pull ${{ secrets.DOCKER_USERNAME }}/trade-give-backend:${{ github.sha }}

            # Stop existing containers
            echo "‚èπÔ∏è  Stopping existing containers..."
            docker-compose down || true

            # Update image tags in docker-compose
            cat > docker-compose.override.yml << 'EOF'
          version: '3.8'

          services:
            loginpage:
              image: ${{ secrets.DOCKER_USERNAME }}/trade-give-frontend:${{ github.sha }}

            backend:
              image: ${{ secrets.DOCKER_USERNAME }}/trade-give-backend:${{ github.sha }}
          EOF

            # Start new containers
            echo "‚ñ∂Ô∏è  Starting new containers..."
            docker-compose up -d

            # Wait for services
            echo "‚è≥ Waiting for services to be healthy..."
            sleep 30

            # Check backend health
            if curl -f http://localhost:3000/api/health > /dev/null 2>&1; then
              echo "‚úÖ Backend is healthy!"
            else
              echo "‚ùå Backend health check failed!"
              docker-compose logs backend
              exit 1
            fi

            # Cleanup old images
            echo "üßπ Cleaning up old images..."
            docker image prune -af --filter "until=72h"

            echo "‚úÖ Deployment completed successfully!"
          ENDSSH

      - name: Verify deployment
        run: |
          echo "üîç Verifying deployment..."

          # Check if the API is responding
          if curl -f http://${{ secrets.EC2_HOST }}:3000/api/health > /dev/null 2>&1; then
            echo "‚úÖ Deployment verified successfully!"
            echo "üåê Application is live at: http://${{ secrets.EC2_HOST }}"
          else
            echo "‚ö†Ô∏è  External health check failed, but deployment may still be successful if firewall blocks external access"
          fi

      - name: Deployment Summary
        if: always()
        run: |
          echo "üöÄ Deployment Summary"
          echo "===================="
          echo "Triggered by: ${{ github.event.workflow_run.event }}"
          echo "Status: ${{ job.status }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: main"
          echo "Tests Result: ${{ github.event.workflow_run.conclusion }}"
          echo ""
          echo "Docker Images:"
          echo "  - Frontend: ${{ secrets.DOCKER_USERNAME }}/trade-give-frontend:${{ github.sha }}"
          echo "  - Backend: ${{ secrets.DOCKER_USERNAME }}/trade-give-backend:${{ github.sha }}"
          if [ "${{ job.status }}" == "success" ]; then
            echo ""
            echo "‚úÖ Deployment succeeded!"
            echo "üåê Application URL: http://${{ secrets.EC2_HOST }}"
          else
            echo ""
            echo "‚ùå Deployment failed!"
          fi

      - name: Comment on PR (if from PR)
        if: always() && github.event.workflow_run.event == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const status = '${{ job.status }}' === 'success' ? '‚úÖ Deployment succeeded!' : '‚ùå Deployment failed!';
            const body = `## AWS Deployment ${status}

            **Commit:** \`${{ github.sha }}\`
            **Docker Images:**
            - Frontend: \`${{ secrets.DOCKER_USERNAME }}/trade-give-frontend:${{ github.sha }}\`
            - Backend: \`${{ secrets.DOCKER_USERNAME }}/trade-give-backend:${{ github.sha }}\`

            ${status.includes('‚úÖ') ? 'üåê **Application URL:** http://${{ secrets.EC2_HOST }}' : ''}

            **Deployment Method:** SSH (PEM key)

            [View workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/deploy_key.pem
