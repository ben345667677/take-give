name: Deploy to AWS (SSH)

# This workflow deploys to AWS EC2 using SSH
# Triggers ONLY after tests pass on main branch
# IMPORTANT: Deployment runs ONLY if tests succeed!

on:
  workflow_run:
    workflows: ["Run Tests"]
    types:
      - completed
    branches:
      - main

jobs:
  deploy:
    name: Deploy to AWS via SSH
    runs-on: ubuntu-latest
    # Only deploy if tests passed successfully
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/deploy_key.pem
          chmod 600 ~/.ssh/deploy_key.pem
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2 via SSH
        run: |
          ssh -i ~/.ssh/deploy_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'ENDSSH'
            set -e

            echo "🚀 Starting deployment on EC2..."

            # Detect OS
            if [ -f /etc/os-release ]; then
              . /etc/os-release
              OS=$ID
            fi

            # Check and install Git if needed
            echo "🔍 Checking Git installation..."
            if ! command -v git &> /dev/null; then
              echo "📦 Git not found. Installing Git..."
              if [ "$OS" = "amzn" ] || [ "$OS" = "centos" ] || [ "$OS" = "rhel" ]; then
                sudo yum install -y git
              elif [ "$OS" = "ubuntu" ] || [ "$OS" = "debian" ]; then
                sudo apt-get update
                sudo apt-get install -y git
              fi
              echo "✅ Git installed successfully: $(git --version)"
            else
              echo "✅ Git is already installed: $(git --version)"
            fi

            # Check and install Docker if needed
            echo "🔍 Checking Docker installation..."
            if ! command -v docker &> /dev/null; then
              echo "📦 Docker not found. Installing Docker..."

              if [ "$OS" = "amzn" ] || [ "$OS" = "centos" ] || [ "$OS" = "rhel" ]; then
                # Amazon Linux / CentOS / RHEL
                echo "🐧 Detected Amazon Linux/RHEL-based system"
                sudo yum update -y
                sudo yum install -y docker
                sudo systemctl start docker
                sudo systemctl enable docker
                sudo usermod -aG docker $USER
              elif [ "$OS" = "ubuntu" ] || [ "$OS" = "debian" ]; then
                # Ubuntu / Debian
                echo "🐧 Detected Debian-based system"
                sudo apt-get update
                sudo apt-get install -y docker.io
                sudo systemctl start docker
                sudo systemctl enable docker
                sudo usermod -aG docker $USER
              else
                echo "❌ Unsupported OS. Please install Docker manually."
                exit 1
              fi

              echo "✅ Docker installed successfully"
            else
              echo "✅ Docker is already installed"
            fi

            # Ensure docker service is running
            echo "🔄 Ensuring Docker service is running..."
            sudo systemctl start docker
            sudo systemctl enable docker

            # Important: Use sudo for docker commands
            # Since usermod requires logout/login, we'll use sudo
            echo "⚙️  Configuring Docker commands..."
            DOCKER_CMD="sudo docker"
            COMPOSE_CMD="sudo docker-compose"

            # Check and install docker-compose if needed
            echo "🔍 Checking docker-compose installation..."
            if ! command -v docker-compose &> /dev/null; then
              echo "📦 docker-compose not found. Installing..."
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose

              # Verify installation
              if command -v docker-compose &> /dev/null; then
                echo "✅ docker-compose installed successfully: $(docker-compose --version)"
              else
                echo "❌ Failed to install docker-compose"
                exit 1
              fi
            else
              echo "✅ docker-compose is already installed: $(docker-compose --version)"
            fi

            echo "✅ All prerequisites are ready"

            # Create and navigate to app directory with proper permissions
            echo "📁 Setting up deployment directory..."
            sudo mkdir -p /opt/trade-give
            sudo chown $USER:$USER /opt/trade-give
            cd /opt/trade-give

            # Clone or pull latest code
            if [ -d ".git" ]; then
              echo "📥 Pulling latest code..."
              git fetch origin
              git reset --hard origin/main
            else
              echo "📥 Cloning repository..."
              git clone https://github.com/${{ github.repository }}.git .
            fi

            # Create .env file if it doesn't exist
            if [ ! -f .env ]; then
              echo "⚠️  WARNING: No .env file found!"
              echo "📝 Creating default .env - CHANGE THESE VALUES!"
              cat > .env << 'ENV_EOF'
          # Database
          DB_HOST=db
          DB_PORT=3306
          DB_USER=produser
          DB_PASSWORD=CHANGE_ME_SECURE_PASSWORD_123
          DB_NAME=loginapp

          # MySQL
          MYSQL_ROOT_PASSWORD=CHANGE_ME_ROOT_PASSWORD_456
          MYSQL_DATABASE=loginapp
          MYSQL_USER=produser
          MYSQL_PASSWORD=CHANGE_ME_SECURE_PASSWORD_123

          # Backend
          JWT_SECRET=CHANGE_ME_SUPER_SECRET_JWT_KEY_789
          PORT=3000
          NODE_ENV=production
          ENV_EOF
              echo "⚠️  IMPORTANT: Edit /opt/trade-give/.env and set secure passwords!"
            fi

            # Stop existing containers
            echo "⏹️  Stopping existing containers..."
            $COMPOSE_CMD down || true

            # Build images directly on EC2
            echo "🔨 Building Docker images on EC2..."
            $COMPOSE_CMD build --no-cache

            # Start new containers
            echo "▶️  Starting new containers..."
            $COMPOSE_CMD up -d

            # Wait for database to be healthy
            echo "⏳ Waiting for database to be healthy..."
            timeout=120
            elapsed=0
            until $COMPOSE_CMD ps db | grep -q "healthy" || [ $elapsed -ge $timeout ]; do
              echo "Database not ready yet... ($elapsed seconds elapsed)"
              sleep 5
              elapsed=$((elapsed + 5))
            done

            if [ $elapsed -ge $timeout ]; then
              echo "❌ Database failed to start"
              $COMPOSE_CMD logs db
              exit 1
            fi

            echo "✅ Database is healthy!"

            # Wait for backend to be ready
            echo "⏳ Waiting for backend to be ready..."
            timeout=120
            elapsed=0
            until curl -f http://localhost:3000/api/health > /dev/null 2>&1 || [ $elapsed -ge $timeout ]; do
              echo "Backend not ready yet... ($elapsed seconds elapsed)"
              sleep 5
              elapsed=$((elapsed + 5))
            done

            if [ $elapsed -ge $timeout ]; then
              echo "❌ Backend health check failed!"
              echo "=== Backend Logs ==="
              $COMPOSE_CMD logs backend
              echo "=== Database Logs ==="
              $COMPOSE_CMD logs db
              exit 1
            fi

            echo "✅ Backend is healthy!"

            # Wait for Nginx to be ready
            echo "⏳ Waiting for Nginx to be ready..."
            timeout=60
            elapsed=0
            until curl -f http://localhost/health > /dev/null 2>&1 || [ $elapsed -ge $timeout ]; do
              echo "Nginx not ready yet... ($elapsed seconds elapsed)"
              sleep 5
              elapsed=$((elapsed + 5))
            done

            if [ $elapsed -ge $timeout ]; then
              echo "❌ Nginx health check failed!"
              $COMPOSE_CMD logs nginx
              exit 1
            fi

            echo "✅ Nginx is healthy!"

            # Show container status
            echo "📊 Container Status:"
            $COMPOSE_CMD ps

            # Cleanup old images
            echo "🧹 Cleaning up old images..."
            $DOCKER_CMD image prune -af --filter "until=72h" || true

            echo "✅ Deployment completed successfully!"
            echo "🌐 Application is accessible at: http://$(curl -s ifconfig.me)"
          ENDSSH

      - name: Verify deployment
        run: |
          echo "🔍 Verifying deployment..."

          # Check if Nginx is responding
          if curl -f http://${{ secrets.EC2_HOST }}/health > /dev/null 2>&1; then
            echo "✅ Nginx is accessible from outside!"
          else
            echo "⚠️  Nginx health check failed from outside"
          fi

          # Check if the API is responding through Nginx
          if curl -f http://${{ secrets.EC2_HOST }}/api/health > /dev/null 2>&1; then
            echo "✅ API is accessible through Nginx!"
            echo "🌐 Application is live at: http://${{ secrets.EC2_HOST }}"
            echo "📡 API endpoint: http://${{ secrets.EC2_HOST }}/api"
          else
            echo "⚠️  External API check failed, but deployment may still be successful if firewall blocks external access"
            echo "💡 Make sure EC2 security group allows HTTP (port 80) from your IP"
          fi

      - name: Deployment Summary
        if: always()
        run: |
          echo "🚀 Deployment Summary"
          echo "===================="
          echo "Triggered by: ${{ github.event.workflow_run.event }}"
          echo "Status: ${{ job.status }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: main"
          echo "Tests Result: ${{ github.event.workflow_run.conclusion }}"
          echo "Deployment Method: Build directly on EC2 (no Docker Hub needed)"
          if [ "${{ job.status }}" == "success" ]; then
            echo ""
            echo "✅ Deployment succeeded!"
            echo "🌐 Application URL: http://${{ secrets.EC2_HOST }}"
          else
            echo ""
            echo "❌ Deployment failed!"
          fi

      - name: Comment on PR (if from PR)
        if: always() && github.event.workflow_run.event == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const status = '${{ job.status }}' === 'success' ? '✅ Deployment succeeded!' : '❌ Deployment failed!';
            const body = `## AWS Deployment ${status}

            **Commit:** \`${{ github.sha }}\`
            **Method:** Built directly on EC2

            ${status.includes('✅') ? '🌐 **Application URL:** http://${{ secrets.EC2_HOST }}' : ''}

            **Deployment Method:** SSH + Git Clone + Docker Compose Build

            [View workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/deploy_key.pem
